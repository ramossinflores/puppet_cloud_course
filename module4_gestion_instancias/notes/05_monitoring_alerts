
# üìù Clase: Monitorizaci√≥n y Alertas en la Nube

**M√≥dulo:** 4 ‚Äì Introducci√≥n a la Computaci√≥n en la Nube
**Fecha:** 2025‚Äë06‚Äë21
**Duraci√≥n:** \~12‚Äì15 min
**Fuente:** Curso ‚ÄúConfiguration Management and the Cloud‚Äù ‚Äì Google IT Automation

## üí° Conceptos clave

### üîç ¬øQu√© es la monitorizaci√≥n?

La **monitorizaci√≥n** es el proceso de recolectar y analizar datos sobre el comportamiento del sistema para:

* Detectar fallos o anomal√≠as.
* Confirmar el correcto funcionamiento.
* Tomar decisiones de mejora.

#### Tipos de m√©tricas

* **Gen√©ricas**: uso de CPU, RAM, espacio en disco...
* **Espec√≠ficas del servicio**: compras exitosas, correos enviados, errores HTTP...

## üßÆ C√≥digos de estado HTTP

| C√≥digo | Significado        | Interpretaci√≥n             |
| ------ | ------------------ | -------------------------- |
| 2xx    | √âxito              | Todo funciona              |
| 4xx    | Error del cliente  | Fallo en la solicitud      |
| 5xx    | Error del servidor | Fallo interno del servicio |

‚û°Ô∏è **Importante**: monitorea cu√°ntos c√≥digos 500 aparecen, ya que indican errores cr√≠ticos del backend

## üìä Sistemas de monitorizaci√≥n

| Tipo        | Ejemplos                                          |
| ----------- | ------------------------------------------------- |
| Gestionados | AWS CloudWatch, Google Stackdriver, Azure Monitor |
| Externos    | Prometheus, Datadog, Nagios                       |

#### M√©todos de env√≠o

* **Pull (extracci√≥n)**: el sistema consulta al servicio.
* **Push (empuje)**: el servicio env√≠a datos al sistema.

üìà Estos datos pueden mostrarse en **dashboards hist√≥ricos y comparativos**

## üì¶ Tipos de monitoreo

| Tipo          | Descripci√≥n                                                       |
| ------------- | ----------------------------------------------------------------- |
| **White-box** | Interno al sistema (variables, logs, m√©tricas personalizadas)     |
| **Black-box** | Externo al sistema (respuestas desde fuera, tiempos de respuesta) |

## üö® Sistema de alertas

> Las alertas notifican autom√°ticamente si un servicio se comporta de forma anormal

### M√©todos b√°sicos

* `cron` + script en Bash o Python que env√≠a correo si algo falla.
* Sistemas integrados que analizan m√©tricas en tiempo real y generan alertas.

### Criterios para alertar

| Situaci√≥n                              | ¬øDebe generar alerta?     |
| -------------------------------------- | ------------------------- |
| RAM supera 10 GB                       | ‚úÖ S√≠, puede causar fallos |
| 50% de respuestas con error 500        | ‚úÖ S√≠, es cr√≠tico          |
| Disco al 80% de uso                    | ‚ö†Ô∏è S√≠, pero no urgente    |
| Consulta muy pesada a la base de datos | ‚ùå No, si no es procesable |

## üì± Tipos de alerta

| Tipo        | Canal habitual                         | Urgencia        |
| ----------- | -------------------------------------- | --------------- |
| **P√°ginas** | SMS, llamada, app m√≥vil, email urgente | Muy alta        |
| **Tickets** | Email, Jira, Slack, sistemas ITSM      | Atenci√≥n normal |

‚û°Ô∏è **Solo debes recibir alertas procesables**, es decir, aquellas en las que puedas actuar

## üß† Buenas pr√°cticas

* No alertar por fallos √∫nicos (ej. fallo puntual en cron)
* Alertar si el fallo es persistente (ej. 3 fallos consecutivos)
* **Clasifica las alertas**: cr√≠ticas vs. no cr√≠ticas
* Colabora con tu equipo para decidir **qu√© m√©tricas alertan y c√≥mo**.

## ‚úÖ Resumen final

* La monitorizaci√≥n permite conocer el estado real del sistema y detectar errores
* Las alertas te liberan de revisar manualmente, pero deben estar bien configuradas
* Las alertas innecesarias generan ruido; las no configuradas a tiempo generan frustraci√≥n
* Con buenos dashboards y reglas, puedes anticiparte a los problemas antes de que afecten a los usuarios.